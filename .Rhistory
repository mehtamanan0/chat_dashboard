stats_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {
"bool": {
"must": [
{ "match": { "business_via_name": "%s" }},
{"range": {"data.created_at": "gte": "%s","lte": "%s"}}},
{ "match": { "type": "chat" }}
]
}
}',channel, start_time, end_time)
return(query)
}
stats_query<-stats_query_generator(channel, start_time, end_time)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
stats_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {
"bool": {
"must": [
{ "match": { "business_via_name": "%s" }},
{"range": {"data.created_at": {"gte": "%s","lte": "%s"}}},
{ "match": { "type": "chat" }}
]
}
}',channel, start_time, end_time)
return(query)
}
stats_query<-stats_query_generator(channel, start_time, end_time)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
stats_query
stats_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {
"bool": {
"must": [
{ "match": { "business_via_name": "%s" }},
{ "range": {"data.created_at": {"gte": "%s","lte": "%s"}}},
{ "match": { "type": "chat" }}
]
}
}}',channel, start_time, end_time)
return(query)
}
stats_query<-stats_query_generator(channel, start_time, end_time)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
library("elastic")
connect(es_host = "search-dev-es-test-n2x6sdp4s55ofsakdwnap7kuge.eu-west-1.es.amazonaws.com", es_path = "", es_port = 443, es_transport_schema  = "https")
stats_query<-stats_query_generator(channel, start_time, end_time)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
message_query<-message_query_generator(channel, start_time, end_time)
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
library("elastic")
connect(es_host = "search-dev-es-test-n2x6sdp4s55ofsakdwnap7kuge.eu-west-1.es.amazonaws.com", es_path = "", es_port = 443, es_transport_schema  = "https")
message_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {"bool":
{"must": [
{"range": {"data.created_at": { "gte": "%s", "lte": "%s"}}},
{ "match": { "type": "message" }},
{"range": {"data.total_user_messages": {"gt": 0}}
}],
"must_not": { "match": { "data.message_by": "Others" }}}
}
}', start_time, end_time, channel)
return(query)
}
stats_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {
"bool": {
"must": [
{ "match": { "business_via_name": "%s" }},
{ "range": {"data.created_at": {"gte": "%s","lte": "%s"}}},
{ "match": { "type": "chat" }}
]
}
}}',channel, start_time, end_time)
return(query)
}
elastic_get_data <- function(index, type, query, size){
res <-Search(index = index, type=type, scroll="5m", body=query, asdf=TRUE, size=size)
response <-res$hits$hits$`_source`$`data`
print(paste('number of hits ',length(response)))
hits <- 1
while(hits != 0){
#res1 <- scroll(scroll_id = res$`_scroll_id`, asdf=TRUE)$hits$hits$`_source` # this does not work
res1 <- scroll(scroll_id = res$`_scroll_id`, asdf=TRUE)
response1 <- res1$hits$hits$`_source`$`data`
hits <- length(response1)
if(hits > 0){
response <- c(response, response1)
print(hits)
}
}
return(response)
}
#res <-Search(index = "kinesis-message-*", type="message",scroll="5m", body=mmatch1,asdf=TRUE,size=10000)
#res <-Search(index = "kinesis-chat-*", type="chat",scroll="5m", body=mmatch1,asdf=TRUE,size=10000)
start_end_time <-function(){
end_time = strftime((as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%z")
start_time = strftime((as.POSIXlt(Sys.time()-3600*24, "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%z")
return(c(start_time,end_time))
}
index = "kinesis-message-*"
type = "message"
duration = start_end_time()
start_time = duration[1]
end_time = duration[2]
channel = "reminderschannel"
message_query<-message_query_generator(channel, start_time, end_time)
stats_query<-stats_query_generator(channel, start_time, end_time)
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
message_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {"bool":
{"must": [
{ "match": { "business_via_name": "%s" }},
{"range": {"data.created_at": { "gte": "%s", "lte": "%s"}}},
{ "match": { "type": "message" }},
{"range": {"data.total_user_messages": {"gt": 0}}
}],
"must_not": { "match": { "data.message_by": "Others" }}}
}
}',channel, start_time, end_time, channel)
return(query)
}
message_query<-message_query_generator(channel, start_time, end_time)
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
index = "kinesis-message-*"
type = "message"
duration = start_end_time()
start_time = duration[1]
end_time = duration[2]
channel = "reminderschannel"
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
message_query = mmatch <- '{
"query": {
"bool": {
"must": [
{
"range": {
"data.created_at": {
"gte": "2017-07-02T05:29Z",
"lte": "2017-07-03T05:29Z"
}
}
},
{ "match": { "type": "message" }},
{
"range": {
"data.total_user_messages": {
"gt": 0
}
}
}
],
"must_not": { "match": { "data.message_by": "Others"  }}
}
}
}'
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
message_query = mmatch <- '{
"query": {
"bool": {
"must": [
{ "match": { "business_via_name": "flightschannel" }},
{
"range": {
"data.created_at": {
"gte": "2017-07-02T05:29Z",
"lte": "2017-07-03T05:29Z"
}
}
},
{ "match": { "type": "message" }},
{
"range": {
"data.total_user_messages": {
"gt": 0
}
}
}
],
"must_not": { "match": { "data.message_by": "Others"  }}
}
}
}'
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
message_query = mmatch <- '{
"query": {
"bool": {
"must": [
{ "match": { "data.business_via_name": "flightschannel" }},
{
"range": {
"data.created_at": {
"gte": "2017-07-02T05:29Z",
"lte": "2017-07-03T05:29Z"
}
}
},
{ "match": { "type": "message" }},
{
"range": {
"data.total_user_messages": {
"gt": 0
}
}
}
],
"must_not": { "match": { "data.message_by": "Others"  }}
}
}
}'
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
View(data_df)
as.POSIXlt(data_df$created_at)
as.POSIXlt(data_df$created_at, "%Y-%m-%dT%H:%M:%S")
as.POSIXlt(data_df$created_at, "%Y-%m-%dT%H:%M:%S")
as.POSIXlt(data_df$created_at, format ="%Y-%m-%dT%H:%M:%S")
as.POSIXlt(data_df$created_at, "%Y-%m-%dT%H:%M:%S%z")
library(RMySQL)
con = dbConnect(MySQL(), user='haptik', password='Batman1305', dbname='mogambo_reporting', host='haptik-staging-3-read-replica.ckfxzl3qckrk.ap-south-1.rds.amazonaws.com')
library("elastic")
connect(es_host = "search-dev-es-test-n2x6sdp4s55ofsakdwnap7kuge.eu-west-1.es.amazonaws.com", es_path = "", es_port = 443, es_transport_schema  = "https")
message_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {"bool":
{"must": [
{ "match": { "data.business_via_name": "%s" }},
{"range": {"data.created_at": { "gte": "%s", "lte": "%s"}}},
{ "match": { "type": "message" }},
{"range": {"data.total_user_messages": {"gt": 0}}
}],
"must_not": { "match": { "data.message_by": "Others" }}}
}
}',channel, start_time, end_time, channel)
return(query)
}
stats_query_generator <- function(channel, start_time, end_time){
query <- sprintf('{"query": {
"bool": {
"must": [
{ "match": { "data.business_via_name": "%s" }},
{ "range": {"data.created_at": {"gte": "%s","lte": "%s"}}},
{ "match": { "type": "chat" }}
]
}
}}',channel, start_time, end_time)
return(query)
}
elastic_get_data <- function(index, type, query, size){
res <-Search(index = index, type=type, scroll="5m", body=query, asdf=TRUE, size=size)
response <-res$hits$hits$`_source`$`data`
print(paste('number of hits ',length(response)))
hits <- 1
while(hits != 0){
#res1 <- scroll(scroll_id = res$`_scroll_id`, asdf=TRUE)$hits$hits$`_source` # this does not work
res1 <- scroll(scroll_id = res$`_scroll_id`, asdf=TRUE)
response1 <- res1$hits$hits$`_source`$`data`
hits <- length(response1)
if(hits > 0){
response <- c(response, response1)
print(hits)
}
}
return(response)
}
#res <-Search(index = "kinesis-message-*", type="message",scroll="5m", body=mmatch1,asdf=TRUE,size=10000)
#res <-Search(index = "kinesis-chat-*", type="chat",scroll="5m", body=mmatch1,asdf=TRUE,size=10000)
start_end_time <-function(){
end_time = strftime((as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%z")
start_time = strftime((as.POSIXlt(Sys.time()-3600*24, "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%z")
return(c(start_time,end_time))
}
index = "kinesis-message-*"
type = "message"
duration = start_end_time()
start_time = duration[1]
end_time = duration[2]
channel = "reminderschannel"
message_query<-message_query_generator(channel, start_time, end_time)
stats_query<-stats_query_generator(channel, start_time, end_time)
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
View(data_df)
as.POSIXct("data", format="%m/%d/%Y %H:%M:%S")
as.POSIXct(data_df$created_at, format="%Y-%m-%dT%H:%M:%S%z"")
as.POSIXct(data_df$created_at, format="%Y-%m-%dT%H:%M:%S%z")
as.POSIXct(data_df$created_at, format="%Y-%m-%dT%H:%M:%S%z")
data_df$created_at
strftime(data_df$created_at, "%Y-%m-%dT%H:%M:%S")
strftime(data_df$created_at, "%Y-%m-%d %H:%M:%S")
strftime(data_df$created_at, "%Y-%m-%d %H:%M:%S")
data_df$created_at
as.POSIXlt(data_df$created_at[1], tz = "UTC")
as.POSIXlt(data_df$created_at[1], tz = "IST")
as.POSIXlt(data_df$created_at[1], tz = "IST")
a = data_df$created_at[1]
a
format(a,usetz=TRUE, tz="Etc/GMT+8")
format(a,usetz=TRUE, tz="Asia/Kolkata")
format(a,usetz=TRUE, tz="UTC")
class(A)
class(a)
strptime(a, "%Y-%m-%d %H:%M:%S")
strptime(a, "%Y-%m-%dT%H:%M:%S%z")
a
strptime(a,format= "%Y-%m-%dT%H:%M:%S%z")
strptime(data_df$created_at,format= "%Y-%m-%dT%H:%M:%S%z")
strptime(data_df$created_at,format= "%Y-%m-%dT%H:%M:%S%z")
strptime(a,format= "%Y-%m-%dT%H:%M:%S%z")
class(a)
strftime(strptime(a, format="%Y-%m-%dT%H:%M:%S%z"),"%H")
a
a
strftime(strptime(a, format="%Y-%m-%dT%H:%M:%S%z"),"%H")
strftime(strptime(a, format="%Y-%m-%dT%H:%M:%S%z"),"%H")
start_time = strftime((as.POSIXlt(Sys.time()-3600*24, "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%z")
start_time
a = start_time
strftime(strptime(a, format="%Y-%m-%dT%H:%M:%S%z"),"%H")
data_df$created_at
a = start_time
a
end_time = strftime((as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%Z")
end_time
end_time = strftime((as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%M:%S%Z")
d = data_df$created_at[1]
d
end_time = strftime((as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%MZ")
end_time
start_end_time <-function(){
end_time = strftime((as.POSIXlt(Sys.time(), "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%MZ")
start_time = strftime((as.POSIXlt(Sys.time()-3600*24, "UTC", "%Y-%m-%dT%H:%M:%S")), "%Y-%m-%dT%H:%MZ")
return(c(start_time,end_time))
}
index = "kinesis-message-*"
type = "message"
duration = start_end_time()
start_time = duration[1]
end_time = duration[2]
channel = "reminderschannel"
message_query<-message_query_generator(channel, start_time, end_time)
stats_query<-stats_query_generator(channel, start_time, end_time)
data_df <- elastic_get_data("kinesis-message-*", "message", message_query, 10000)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
strftime(strptime(data_df$created_at[1], format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
strftime(strptime(data_df$created_at, format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
a <- strftime(strptime(data_df$created_at, format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
p <- as.POSIXct(a, tz="Asia/Kolkata")
p
a
p
p <- as.POSIXct(a, tz="UTC")
p
p <- as.POSIXct(a, tz="UTC")
z <- format(p, tz="Asia/Kolkata",usetz=TRUE)
z
source("elastic_data.R")
names(data_df)
data_df['created_at']
names(data_df)
connect(es_host = "search-dev-es-test-n2x6sdp4s55ofsakdwnap7kuge.eu-west-1.es.amazonaws.com", es_path = "", es_port = 443, es_transport_schema  = "https")
stats_query<-stats_query_generator(channel, start_time, end_time)
stats_df <- elastic_get_data("kinesis-chat-*", "chat", stats_query, 10000)
names(stats_df)
z <- format(p, tz="Asia/Kolkata",usetz=TRUE)
z
k<-strftime(z, %Y-%m-%d %H:%M:%S")
k<-strftime(z, "%Y-%m-%d %H:%M:%S")
k
names(stats_df)
names(data_df)
View(data_df)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
channel_data_df("Last 12 Hours", "flightschannel")
date_convertion_to_IST <- function(df, colname){
print(df[colname])
date_string <- strftime(strptime(df[colname], format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
utc_date_dtring <- as.POSIXct(date_string, tz="UTC")
df[colname] <- format(utc_date_dtring, tz="Asia/Kolkata",usetz=TRUE)
df[colname] <- strftime(df[colname], "%Y-%m-%d %H:%M:%S")
return(df)
}
# read channel df
channel_data_df("Last 12 Hours", "flightschannel")
data_df$created_at
strftime(strptime(data_df['created_at'], format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
strftime(strptime(data_df$created_at, format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
date_convertion_to_IST <- function(date_string){
date_string <- strftime(strptime(date_string, format="%Y-%m-%dT%H:%MZ"),"%Y-%m-%d %H:%M:%S")
utc_date_dtring <- as.POSIXct(date_string, tz="UTC")
ist_date_string <- format(utc_date_dtring, tz="Asia/Kolkata",usetz=TRUE)
ist_date_string<- strftime(ist_date_string, "%Y-%m-%d %H:%M:%S")
return(ist_date_string)
}
# read channel df
channel_data_df <-function(date,channel){
duration <- start_end_time(date)
query <- message_query_generator(channel, duration[1], duration[2])
channel_data_df <- elastic_get_data(MESSAGE_KINESIS_INDEX, MESSAGE_KINESIS_TYPE, query, 1000)
channel_data_df$created_at <- date_convertion_to_IST(channel_data_df$created_at)
channel_data_df <- plyr::rename(channel_data_df, c("business_via_name"="channel"))
return(channel_data_df)
}
channel_data_df("Last 12 Hours", "flightschannel")
runApp()
runApp()
names(data_df)
names(stats_df)
runApp()
names(data_df)
names(stats_df)
runApp()
runApp()
names(stats_df)
length(unique(data_df$coll_id))
runApp()
runApp()
unique(data_df$message_by)
data_df$new_conversation
runApp()
runApp()
install.packages("DT")
install.packages("DT")
install.packages("DT")
shiny::runApp()
setwd("~/Desktop/Haptik/APIs/Chat_Dashboard")
runApp()
install.packages('shiny', repos = 'http://cran.rstudio.com')
install.packages('shiny', repos = 'http://cran.rstudio.com')
install.packages("shiny", repos = "http://cran.rstudio.com")
install.packages("shiny", repos = "http://cran.rstudio.com")
install.packages("shiny", repos = "http://cran.rstudio.com")
install.packages("shiny", repos = "http://cran.rstudio.com")
devtools::session_info('DT')
shiny::runApp()
data_df
View(data_df)
runApp()
data_df$chat_links <- paste0("<a href='",  data_df$chat_links, "' target='_blank'>See Chats</a>")
data_show_df <- data_df
data_show_df
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_df <- as.data.frame(data_df, stringsAsFactors=TRUE)
str(data_df)
View(data_df)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
a <- fetch_elastic_stats("Last Week")
a <- fetch_elastic_stats("Last Week","flightschannel")
View(a$stats_data)
k <-a$stats_data
k$coll_id
unique(k$coll_id)
length(unique(k$coll_id))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
a = "{u'entities': {u'passenger_age2': [], u'no_of_guests': [], u'passenger_age1': [], u'request_id': [], u'is_cheap_flag': [], u'departure_date': [], u'travel_no_of_people': [], u'train_no': [], u'train_departure_city': [], u'check_in_date': [], u'restaurant_city': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'Delhi'}], u'train_berth': [], u'cab_flow_type': [], u'full_name': [], u'flights_stops_filter': [], u'dest_lng': [], u'trip_amount': [], u'airline_direction': [], u'dest_lat': [], u'passenger_gender1': [], u'arrival_date': [], u'passenger_gender2': [], u'flight_pnr': [], u'set_followup': [], u'return_time': [], u'cab_location': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'New Delhi'}], u'cab_coupon_payload': [], u'cashback': [], u'flight_passenger_secondary': [], u'cab_payment_mode': [], u'product_name': [], u'merchant_name': [{u'detection': u'chat', u'original_text': u'flight', u'entity_value': u'flights'}], u'train_arrival_city': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'NDLS'}], u'flight_message_return': [], u'completion_email': [], u'bus_origin_city': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'New Delhi'}], u'time': [], u'flight_departure_city': [], u'cab_partner_name': [], u'completion_phone_number': [], u'return_id': [], u'flight_time_range': [], u'onward_id': [], u'bus_destination_city': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'New Delhi'}], u'flight_passenger_prime': [], u'time_with_range': [], u'date': [], u'hotel_city': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'Delhi'}], u'departure_time': [], u'attempt': [], u'product_id': [], u'passenger_name1': [], u'no_of_adults': [{u'detection': u'form_correctly_verified', u'original_text': u'1', u'entity_value': u'1'}], u'passenger_name2': [], u'flight_arrival_city': [{u'detection': u'chat', u'original_text': u'delhi', u'entity_value': u'DEL'}], u'email': [{u'detection': u'user_profile', u'original_text': u'viraj@haptik.co', u'entity_value': u'viraj@haptik.co'}], u'airline': [], u'title_prime': [], u'flight_message_onward': [], u'title_secondary': [], u'travel_month': [], u'confirm_cancel': []}, u'entity_utility': {u'arrival_date': None, u'contact_details': {u'city': u'Mumbai', u'firstname': None, u'mobile': None, u'lastname': None, u'pincode': u'400063', u'state': u'Maharashtra', u'address': u'Cello Triumph 8th Floor, IB Patel Road, Goregaon East', u'email': None}, u'adults': u'1', u'search_filters': {u'direction': None, u'cheapest': False, u'entity_data_message': {u'direction': None, u'cheapest': False, u'airlines': None, u'stops': None, u'departure_slot': None, u'amount': None, u'return_slot': None, u'duration': None}, u'airlines': None, u'stops': None, u'departure_slot': None, u'amount': None, u'return_slot': None, u'duration': None}, u'schedule_time': None, u'departure_date': None, u'return_id': None, u'onward_id': None, u'search_details': {u'origin': None, u'adults': u'1', u'destination': u'DEL', u'depdate': None, u'infants': u'0', u'arrdate': None, u'children': u'0'}, u'flight_number': None, u'departure_city': None, u'airline': None, u'passenger_info': [{u'LastName': None, u'FirstName': None, u'Title': None}], u'schedule_date': None, u'arrival_city': u'DEL'}, u'response_list': [{u'delay': 1, u'message_body': u'Thank You, Viraj! Can you tell me your departure city?', u'quick_response': [], u'stop_flag': False, u'message_type': 18}]}"
jsonlite::prettify(a)
jsonlite::toJSON(a)
k<-jsonlite::toJSON(a)
k
jsonlite::prettify(k)
a
gsub("'",'"',a)
k <- gsub("'",'"',a)
k
jsonlite::prettify(k)
k<-gsub("u'",'"',a)
k
k<-gsub("'",'"',k)
k
jsonlite::prettify(k)
k<-gsub("None",'"NULL"',k)
k
jsonlite::prettify(k)
k<-gsub("False",'"NULL"',k)
k
k<-gsub("True",'"NULL"',k)
k
jsonlite::prettify(k)
runApp()
